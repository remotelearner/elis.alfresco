diff --git a/lib/accesslib.php b/lib/accesslib.php
index 9319c55..e5e3b3b 100644
--- a/lib/accesslib.php
+++ b/lib/accesslib.php
@@ -1087,12 +1087,12 @@ function get_empty_accessdata() {
 function get_user_accessdata($userid, $preloadonly=false) {
     global $CFG, $ACCESSLIB_PRIVATE, $USER;
 
-    if (!empty($USER->access['rdef']) and empty($ACCESSLIB_PRIVATE->rolepermissions)) {
+    if (!empty($USER->acces['rdef']) and empty($ACCESSLIB_PRIVATE->rolepermissions)) {
         // share rdef from USER session with rolepermissions cache in order to conserve memory
-        foreach ($USER->access['rdef'] as $k=>$v) {
-            $ACCESSLIB_PRIVATE->rolepermissions[$k] =& $USER->access['rdef'][$k];
+        foreach($USER->acces['rdef'] as $k=>$v) {
+            $ACCESSLIB_PRIVATE->rolepermissions[$k] =& $USER->acces['rdef'][$k];
         }
-        $ACCESSLIB_PRIVATE->accessdatabyuser[$USER->id] = $USER->access;
+        $ACCESSLIB_PRIVATE->accessdatabyuser[$USER->id] = $USER->acces;
     }
 
     if (!isset($ACCESSLIB_PRIVATE->accessdatabyuser[$userid])) {
@@ -2490,11 +2490,8 @@ function get_default_capabilities($archetype) {
  * Reset role capabilities to default according to selected role archetype.
  * If no archetype selected, removes all capabilities.
  *
- * This applies to capabilities that are assigned to the role (that you could
- * edit in the 'define roles' interface), and not to any capability overrides
- * in different locations.
- *
- * @param int $roleid ID of role to reset capabilities for
+ * @param int $roleid
+ * @return void
  */
 function reset_role_capabilities($roleid) {
     global $DB;
@@ -2504,15 +2501,11 @@ function reset_role_capabilities($roleid) {
 
     $systemcontext = context_system::instance();
 
-    $DB->delete_records('role_capabilities',
-            array('roleid' => $roleid, 'contextid' => $systemcontext->id));
+    $DB->delete_records('role_capabilities', array('roleid'=>$roleid));
 
     foreach($defaultcaps as $cap=>$permission) {
         assign_capability($cap, $permission, $roleid, $systemcontext->id);
     }
-
-    // Mark the system context dirty.
-    context_system::instance()->mark_dirty();
 }
 
 /**
@@ -5115,7 +5108,7 @@ abstract class context extends stdClass implements IteratorAggregate {
      * @param stdClass $record
      */
     protected function __construct(stdClass $record) {
-        $this->_id           = (int)$record->id;
+        $this->_id           = $record->id;
         $this->_contextlevel = (int)$record->contextlevel;
         $this->_instanceid   = $record->instanceid;
         $this->_path         = $record->path;
