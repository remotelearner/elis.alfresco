diff --git a/lib/form/filemanager.js b/lib/form/filemanager.js
index 8d5403e..d8dfc5b 100644
--- a/lib/form/filemanager.js
+++ b/lib/form/filemanager.js
@@ -37,6 +37,15 @@
  * this.options.itemid
  */
 
+// RL EDIT: BJB130215
+function var_dump(msg, obj) {
+    var out = msg;
+    for (var i in obj) {
+        out += i + ': ' + obj[i] + "\n";
+    }
+    window.alert(out);
+}
+// End RL EDIT
 
 M.form_filemanager = {templates:{}};
 
@@ -66,7 +75,15 @@ M.form_filemanager.init = function(Y, options) {
                 this.enablemainfile = options.mainfile;
             }
             this.client_id = options.client_id;
-            this.currentpath = '/';
+            // RL EDIT: BJB130215
+            this.currentpath = this.options.currentpath
+                               ? this.options.currentpath : '/';
+            // var_dump('filemanager.js::initializer(): this.options = ', this.options);
+            // 'Jump to..' menu
+            // var_dump('/lib/form/filemamanger.js::init: locations = ', options.locations);
+            this.locations = options.locations ? options.locations : null;
+            this.nomoodlefiles = options.nomoodlefiles;
+            // End RL EDIT
             this.maxfiles = options.maxfiles;
             this.maxbytes = options.maxbytes;
             this.areamaxbytes = options.areamaxbytes;
@@ -132,13 +149,27 @@ M.form_filemanager.init = function(Y, options) {
             // display files
             this.viewmode = 1; // TODO take from cookies?
             this.filemanager.all('.fp-vb-icons,.fp-vb-tree,.fp-vb-details').removeClass('checked')
-            this.filemanager.all('.fp-vb-icons').addClass('checked')
-            this.refresh(this.currentpath); // MDL-31113 get latest list from server
+            this.filemanager.all('.fp-vb-icons').addClass('checked');
+            this.update_form_buttons(this.currentpath, true); // RL EDIT: ELIS-6958
+            this.refresh_content_and_jump_options([this.currentpath]); // RL EDIT: ELIS-8581, MDL-31113 get latest list from server
         },
 
         wait: function() {
            this.filemanager.addClass('fm-updating');
         },
+        // RL EDIT: BJB130215
+        toggle_button_visibility: function(data) {
+            if (data.canedit == false) {
+                // No permissions
+                Y.all('.fp-btn-add').hide();
+                Y.all('.fp-btn-mkdir').hide();
+            } else {
+                // Have permissions, or is the Moodle files area
+                Y.all('.fp-btn-add').show();
+                Y.all('.fp-btn-mkdir').show();
+            }
+        },
+        // End RL EDIT
         request: function(args, redraw) {
             var api = this.api + '?action='+args.action;
             var params = {};
@@ -149,9 +180,10 @@ M.form_filemanager.init = function(Y, options) {
             params['sesskey'] = M.cfg.sesskey;
             params['client_id'] = this.client_id;
             params['filepath'] = this.currentpath;
-            params['itemid'] = this.options.itemid?this.options.itemid:0;
+            params['itemid'] = this.options.itemid ? this.options.itemid :
+                               (this.moodle_itemid ? this.moodle_itemid: 0); // RL EDIT: BJB130215
             if (args['params']) {
-                for (i in args['params']) {
+                for (var i in args['params']) {
                     params[i] = args['params'][i];
                 }
             }
@@ -174,6 +206,19 @@ M.form_filemanager.init = function(Y, options) {
                         if (data && data.tree && scope.set_current_tree) {
                             scope.set_current_tree(data.tree);
                         }
+                        // RL EDIT: BJB130215
+                        if (data && data.parentpath) {
+                            // Set the parent path in the provider scope (i.e. the caller)
+                            scope.set_parentpath(data.parentpath);
+                        } else if (data) {
+                            // Specify that we are in the "Moodle" area
+                            scope.set_parentpath([]);
+                        }
+                        if (data) {
+                            // Toggle visibility of buttons based on whether we have permissions
+                            scope.toggle_button_visibility(data);
+                        }
+                        // End RL EDIT
                         args.callback(id,data,p);
                     }
                 },
@@ -222,19 +267,142 @@ M.form_filemanager.init = function(Y, options) {
             } else {
                 this.currentpath = filepath;
             }
+            // RL EDIT: BJB130215
+            // alert('refresh(filepath = "' + filepath + '"): this.currentpath = ' + this.currentpath);
+            var textpath = '';
+            for (var pi in this.options.path) {
+                // var_dump('this.options.path[' + pi + '] = ', this.options.path[pi]);
+                if (this.options.path[pi].name && this.options.path[pi].path == filepath) {
+                    textpath = this.options.path[pi].name;
+                    break;
+                }
+            }
+            // End RL EDIT
             this.request({
                 action: 'list',
                 scope: scope,
-                params: {'filepath':filepath},
+                params: {'filepath': filepath, textpath: textpath, src: 'refresh'}, // RL EDIT: BJB130215
                 callback: function(id, obj, args) {
                     scope.filecount = obj.filecount;
                     scope.options = obj;
+                    scope.update_form_buttons(scope.currentpath, false); // RL EDIT: ELIS-6958
                     scope.lazyloading = {};
                     scope.check_buttons();
                     scope.render(obj);
                 }
             }, true);
         },
+        // RL EDIT: ELIS-6958
+        // Method to toggle 'Save Changes' & 'Cancel' buttons in private files
+        update_form_buttons: function(path, allowhide) {
+            var btndiv;
+            var src = window.location.href;
+            //alert('update_form_buttons: source page = '+ src);
+            if ((src.indexOf('/user/files.php') > 0 ||
+                 src.indexOf('/repository/filemanager.php') > 0) &&
+                (btndiv = Y.one('#fgroup_id_buttonar'))) {
+                if (path.substr(0,1) == '/') {
+                    btndiv.removeClass('hide').addClass('fitem fitem_fgroup');
+                } else if (allowhide) {
+                    btndiv.removeClass('fitem fitem_fgroup').addClass('hide');
+                }
+            }
+        },
+        // Add appropriate entries to the "Jump to" menu based on provided paths
+        // and current browsing location
+        set_jumpto_state: function(p_extra) {
+            // Current browsing location
+            var location = p_extra[0];
+
+            var scope = p_extra[1];
+            var node = p_extra[2];     // no longer used
+            var menudata = p_extra[3]; // no longer used
+            var itemid = p_extra[4];   // no longer used
+            var nomoodlefiles = scope.nomoodlefiles;
+
+            // "Jump to" locations
+            var locations = scope.locations;
+            if (!locations || locations.length < 1) {
+                var jumpnode = Y.one('.fp-menu-jumpto');
+                if (jumpnode) {
+                    jumpnode.innerHTML = '';
+                }
+                return;
+            }
+
+            menudata = [];
+            var j = 0;
+            for (var i = 0; i < locations.length; i++) {
+                var link_path = locations[i].path;
+                var link_name = locations[i].name;
+                var link_style = 'display: inline';
+
+                // Determine if the "Jump to" UUID is present anywhere up the
+                // directory structure
+                var found = false;
+                if (scope.parentpath) {
+                    for (var k = 0; k < scope.parentpath.length; k++) {
+                        if (scope.parentpath[k] == locations[i].unbiasedpath) {
+                            found = true;
+                            break;
+                        }
+                    }
+                }
+
+                // Not found, so add the location to the menu
+                if (!found) {
+                    menudata[j] = { text: link_name, value: link_path, style: link_style, onclick: { fn: scope.on_location_item_click, obj:[link_path,scope,node,menudata,j], scope: scope } };
+                    ++j;
+                }
+            }
+
+            // Logic for adding the "Moodle" location
+            if (location != '/' && !scope.nomoodlefiles) {
+                menudata[j] = { text: scope.moodlefiles, value: '/', style: 'display: inline', onclick: { fn: scope.on_location_item_click, obj:['/',scope,node,menudata,j], scope: scope } };
+            }
+            scope.update_location_menu(menudata);
+        },
+        // Refresh the file listing and the "Jump to" dropdown options
+        refresh_content_and_jump_options: function(p_extra) {
+            var filepath = p_extra[0];
+
+            var scope = this;
+            this.currentpath = filepath;
+            if (!filepath) {
+                filepath = this.currentpath;
+            } else {
+                this.currentpath = filepath;
+            }
+
+            // Handle file listing through the standard request setup
+            this.request({
+                action: 'list',
+                scope: scope,
+                params: {'filepath': filepath},
+                callback: function(id, obj, args) {
+                    if (obj.error) {
+                        scope.print_msg(obj.error, 'error');
+                        scope.refresh('/');
+                        return;
+                    }
+
+                    scope.filecount = obj.filecount;
+                    scope.check_buttons();
+                    scope.options = obj;
+                    if (obj.locations) {
+                        scope.locations = obj.locations;
+                    }
+                    scope.update_form_buttons(scope.currentpath, false); // RL EDIT: ELIS-6958
+                    scope.lazyloading = {};
+                    scope.render(obj);
+
+                    // Set up the "Jump to" options after content is refreshed
+                    scope.set_jumpto_state([p_extra[0], scope, p_extra[2],
+                                            p_extra[3], p_extra[4]]);
+                }
+            }, true);
+        },
+        // End RL EDIT
         /** displays message in a popup */
         print_msg: function(msg, type) {
             var header = M.str.moodle.error;
@@ -293,8 +461,16 @@ M.form_filemanager.init = function(Y, options) {
                     // a function used to perform an ajax request
                     var perform_action = function(e) {
                         e.preventDefault();
+                        // RL EDIT: BJB130215
+                        Y.one('#fm-newname-'+scope.client_id).set('disabled', 'disabled');
+                        Y.one('.fp-dlg-butcreate').set('disabled', true);
+                        // End RL EDIT
                         var foldername = Y.one('#fm-newname-'+scope.client_id).get('value');
                         if (!foldername) {
+                            // RL EDIT: BJB130215
+                            Y.one('#fm-newname-'+scope.client_id).set('disabled', '');
+                            Y.one('.fp-dlg-butcreate').set('disabled', false);
+                            // End RL EDIT
                             scope.mkdir_dialog.hide();
                             return;
                         }
@@ -303,6 +479,13 @@ M.form_filemanager.init = function(Y, options) {
                             params: {filepath:scope.currentpath, newdirname:foldername},
                             callback: function(id, obj, args) {
                                 var filepath = obj.filepath;
+                                // RL EDIT: BJB130215
+                                Y.one('#fm-newname-'+scope.client_id).set('disabled', '');
+                                Y.one('.fp-dlg-butcreate').set('disabled', false);
+                                if (obj.error) {
+                                    scope.print_msg(obj.error, 'error');
+                                }
+                                // End RL EDIT
                                 scope.mkdir_dialog.hide();
                                 scope.refresh(filepath);
                                 Y.one('#fm-newname-'+scope.client_id).set('value', '');
@@ -368,6 +551,8 @@ M.form_filemanager.init = function(Y, options) {
                 });
             }, this);
 
+            this.print_fm_jump(); // RL EDIT: BJB130215 - 'Jump to..' menu
+
             this.filemanager.all('.fp-vb-icons,.fp-vb-tree,.fp-vb-details').
                 on('click', function(e) {
                     e.preventDefault();
@@ -388,7 +573,166 @@ M.form_filemanager.init = function(Y, options) {
                     }
                 }, this);
         },
+        // RL EDIT: BJB130215
+        on_location_item_click: function(p_sType, p_aArgs, p_extra) {
+            // Respect the "Jump to..." options while updating content
+            this.refresh_content_and_jump_options(p_extra);
+        },
+        create_jumpto_elem: function(jumpnode) {
+            jumpnode.innerHTML = '';
+            // Add container button for Locations menu
+            var html_locations = '<input type="button" id="fmlocationbutton" name="fmlocationbutton" value="'+M.str.repository_elis_files.jump+'">';
+            var fmlocationbutton = Y.Node.create(html_locations);
+            Y.one(document.body).appendChild(fmlocationbutton);
+            jumpnode.appendChild(fmlocationbutton);
+        },
+        print_fm_jump: function() {
+            var locations = this.locations;
+            var jumpnode = Y.one('.fp-menu-jumpto');
+            //alert('print_fm_jump(): locations = ' + locations + ', node = ' + jumpnode);
+            if ((!this.nomoodlefiles || locations) && jumpnode) {
+                //this.create_jumpto_elem(jumpnode);
+                this.moodlefiles = M.str.repository_elis_files.moodle + ' '
+                                   + this.options.path[0].name; // TBD
+                this.moodle_itemid = this.options.itemid;
+            }
+        },
+        setup_jumpmenu_event : function(event, location_button) {
+            var YAHOO = Y.YUI2; // ELIS-8291/ELIS-7858 - BJB130219
+            var outterfound = false;
+            var fmcallback = function(e) {
+                var jmpmenu = location_button.getMenu();
+                var target = YAHOO.util.Event.getTarget(e)
+                //var_dump('fm::setup_jumpmenu_event:fmcallback: target = ', target);
+                var found = false;
+                var menuitems;
+                if (target.id &&
+                    (menuitems = YAHOO.util.Dom.getElementsByClassName('yuimenuitemlabel'))) {
+                    // Determine if what is being clicked is an yui menu item
+                    for (var i = 0; i < menuitems.length; i++) {
+                        if (menuitems[i].id == target.id) {
+                            found = true;
+                            break;
+                        }
+                    }
+                }
+                // Hide the menu only if we clicked outside of it
+                if (!found) {
+                    jmpmenu.hide();
+                }
+                YAHOO.util.Event.removeListener(document, 'mousedown', fmcallback);
+            };
+
+            var listeners = YAHOO.util.Event.getListeners(document, 'mousedown');
+            for (var j in listeners) {
+                if (listeners[j].fn == fmcallback) {
+                    outterfound = true;
+                    break;
+                }
+            }
+            if (!outterfound) {
+                YAHOO.util.Event.addListener(document, 'mousedown', fmcallback);
+            }
+        },
+        jumpto_item_keypressed: function(e, f_args) {
+            var YAHOO = Y.YUI2; // ELIS-8291/ELIS-7858 - BJB130219
+            var scope = f_args[0];
+            var shift = f_args[1];
+            var key = YAHOO.util.Event.getCharCode(e);
+            //if (key != 16) { // Debug ONLY!
+            //    var_dump('fmlocationbutton::keypress: key = ' + key + ', event = ', e);
+            //}
+            if (key == 9 && (e.shiftKey == shift ||
+                             (shift ^ (scope.lastkey != 16)))) {
+                // Tab[+shift?] key pressed
+                scope.location_button.getMenu().hide();
+            }
+            scope.lastkey = key;
+        },
+        update_location_menu: function(menudata) {
+            var YAHOO = Y.YUI2; // ELIS-8291/ELIS-7858 - BJB130219
+            var jumpnode;
+            if (this.location_button) {
+                this.location_button.destroy();
+                this.location_button = null;
+                if (!menudata.length) {
+                    return;
+                }
+                jumpnode = Y.one('.fp-menu-jumpto');
+                if (!jumpnode) {
+                    return;
+                }
+                this.create_jumpto_elem(jumpnode);
+            } else if (!menudata.length) {
+                jumpnode = Y.one('.fp-menu-jumpto');
+                jumpnode.innerHTML = '';
+                return;
+            }
+
+            if (!Y.one('#fmlocationbutton')) {
+                jumpnode = Y.one('.fp-menu-jumpto');
+                if (!jumpnode) {
+                    return;
+                }
+                this.create_jumpto_elem(jumpnode);
+            }
+
+            // TBD: sort the location menu items?
+
+            // Create widget for our menu
+            this.location_button = new YAHOO.widget.Button("fmlocationbutton",
+                     { name: "fm_locations_menu",
+                       label: "<span>"+M.str.repository_elis_files.jump+"</span>",
+                       type: "menu",
+                       menu: menudata,
+                       menuclassname: "elis_fm-jumpto-menu",
+                       menualignment: ["tr", "br"]
+                     });
+
+            //var_dump('update_location_menu(): NEW location_button = ', this.location_button);
+            if (!this.location_button) {
+                return;
+            }
+
+            //var_dump('created this.location_button = ', this.location_button);
+            // Make the jump button look not look like a button
+            this.location_button.setStyle("border", "none");
+            this.location_button.setStyle("background", "none");
+            var children = YAHOO.util.Dom.getChildren('fmlocationbutton');
+            if (children && children.length) {
+               // Override the border-style property for the firstchild span
+               children[0].style.borderStyle = 'none';
+            }
+
+            YAHOO.util.Event.addListener('fmlocationbutton-button', 'click', this.setup_jumpmenu_event, this.location_button);
+
+            this.location_button.getMenu().show(); // required to update DOM
+            YAHOO.widget.Module.forceDocumentRedraw(); // required to update DOM
+            this.location_button.getMenu().hide(); // required
 
+            var menuitems = YAHOO.util.Dom.getElementsByClassName('yuimenuitemlabel');
+            //alert('update_location_menu: menuitems.length = '+ menuitems.length);
+            if (menuitems && menuitems.length) {
+                // Only have to listen for keypress on first & last menu items
+                YAHOO.util.Event.addListener(menuitems[0],
+                                             'keydown',
+                                             this.jumpto_item_keypressed,
+                                             [this, true], this);
+                if (menudata && menuitems.length > menudata.length) {
+                     // It's picking up entires in filepicker Jumpto...
+                    YAHOO.util.Event.addListener(menuitems[menudata.length - 1],
+                                                 'keydown',
+                                                 this.jumpto_item_keypressed,
+                                                 [this, false], this);
+                } else {
+                    YAHOO.util.Event.addListener(menuitems[menuitems.length - 1],
+                                                 'keydown',
+                                                 this.jumpto_item_keypressed,
+                                                 [this, false], this);
+                }
+            }
+        },
+        // End RL EDIT
         show_filepicker: function (e) {
             // if maxfiles == -1, the no limit
             e.preventDefault();
@@ -427,7 +771,9 @@ M.form_filemanager.init = function(Y, options) {
                         on('click', function(e, path) {
                             e.preventDefault();
                             if (!this.is_disabled()) {
-                                this.refresh(path);
+                                // RL EDIT: BJB130215 - Respect the "Jump to..." options while updating content
+                                this.refresh_content_and_jump_options([path]);
+                                // End RL EDIT
                             }
                         }, this, p[i].path);
                 }
@@ -454,18 +800,32 @@ M.form_filemanager.init = function(Y, options) {
                 node.fileinfo.fullname = node.fileinfo.title;
                 node.fileinfo.filename = '.';
             }
+            // RL EDIT: BJB130215
+            var textpath = '';
+            for (var pi in this.options.path) {
+                // var_dump('this.options.path[' + pi + '] = ', this.options.path[pi]);
+                if (this.options.path[pi].name && this.options.path[pi].path == node.path) {
+                    textpath = this.options.path[pi].name;
+                    break;
+                }
+            }
+            // End RL EDIT
             this.request({
                 action:'list',
-                params: {filepath:node.path?node.path:''},
+                params: {filepath: node.path ? node.path :'',
+                         textpath: textpath,
+                              src: 'treeview_dynload'}, // RL EDIT : BJB130215 - TBD
                 scope:this,
                 callback: function(id, obj, args) {
                     var list = obj.list;
                     var scope = args.scope;
                     // check that user did not leave the view mode before recieving this response
                     if (!(scope.viewmode == 2 && node && node.getChildrenEl())) {
+                        // alert('fm::treeview_dynaload:request-list::callback: !(viewmode == 2 && node && getChildrenEl()) ... returning!');
                         return;
                     }
                     if (cb != null) { // (in manual mode do not update current path)
+                        // var_dump('fm::treeview_dynaload:request-list::callback: cb NOT NULL ... reseting scope.options & scope.currentpath! cb = ', cb);
                         scope.options = obj;
                         scope.currentpath = node.path?node.path:'/';
                     }
@@ -473,7 +833,7 @@ M.form_filemanager.init = function(Y, options) {
                     node.origlist = obj.list ? obj.list : null;
                     node.origpath = obj.path ? obj.path : null;
                     node.children = [];
-                    for(k in list) {
+                    for (var k in list) { // RL EDIT: BJB130215
                         if (list[k].type == 'folder' && retrieved_children[list[k].filepath]) {
                             // if this child is a folder and has already been retrieved
                             retrieved_children[list[k].filepath].fileinfo = list[k];
@@ -484,6 +844,7 @@ M.form_filemanager.init = function(Y, options) {
                         }
                     }
                     if (cb == null) {
+                        // alert('fm::treeview: calling node.refresh for '+ node.path);
                         node.refresh();
                     } else {
                         // invoke callback requested by TreeView component
@@ -519,7 +880,38 @@ M.form_filemanager.init = function(Y, options) {
                 this.processingimages = false;
             }, this), 200)
         },
+        // RL EDIT: BJB130215
+        /**
+         * Check the browser has the required functionality (added by RL)
+         * Note: This is copied from dndupload.js because it's not in scope
+         *
+         * @return true if browser supports drag/drop upload
+         */
+        browser_supported: function() {
+            if (typeof FileReader == 'undefined') {
+                return false;
+            }
+            if (typeof FormData == 'undefined') {
+                return false;
+            }
+            return true;
+        },
+        // End RL EDIT
         view_files: function(appendfiles) {
+            // RL edit - toggle drag and drop depending on permissions and
+            // availability in browser
+            var in_moodle_files = this.currentpath.substring(0, 1) === '/';
+            var browser_supported = this.browser_supported();
+
+            var dnd_enabled = browser_supported && (this.options.canedit || in_moodle_files);
+            if (dnd_enabled) {
+                // Set up body class to signify that drag and drop is enabled
+                Y.one('body').removeClass('dndnotsupported').addClass('dndsupported');
+            } else {
+                // Set up body class to signify that drag and drop is disabled
+                Y.one('body').removeClass('dndsupported').addClass('dndnotsupported');
+            }
+            // End of RL edit
             this.filemanager.removeClass('fm-updating').removeClass('fm-noitems');
             if ((appendfiles == null) && (!this.options.list || this.options.list.length == 0) && this.viewmode != 2) {
                 this.filemanager.addClass('fm-noitems');
@@ -578,6 +970,12 @@ M.form_filemanager.init = function(Y, options) {
                 options.norootrightclick = true;
                 options.callback = function(e, node) {
                     // TODO MDL-32736 e is not an event here but an object with properties 'event' and 'node'
+                    // RL EDIT: BJB130215
+                    // var_dump('fm::view_files(viewmode = 2[tree])::options.callback: node = ', node);
+                    if (!node.fullname && node.title) {
+                        node.fullname = node.title;
+                    }
+                    // End RL EDIT
                     if (!node.fullname) {return;}
                     if (node.type != 'folder') {
                         if (e.node.parent && e.node.parent.origpath) {
@@ -621,20 +1019,36 @@ M.form_filemanager.init = function(Y, options) {
             var appendfilepaths = function(list, node) {
                 if (!node || !node.children || !node.children.length) {return;}
                 for (var i in node.children) {
-                    list[list.length] = node.children[i].filepath;
+                    // RL EDIT: BJB130215
+                    var key = node.children[i].textpath
+                              ? node.children[i].textpath
+                              : node.children[i].filepath;
+                    list[key] = node.children[i].filepath;
+                    // End RL EDIT
                     appendfilepaths(list, node.children[i]);
                 }
             }
-            var list = ['/'];
+            // RL EDIT: BJB130215
+            var list = { };
+            if (!tree || !tree.children[0] || tree.children[0].filepath.substr(0, 1) == '/') {
+                list['/'] = '/';
+            }
+            // End RL EDIT
             appendfilepaths(list, tree);
             var selectnode = this.selectnode;
             node = selectnode.one('.fp-path select');
             node.setContent('');
             for (var i in list) {
                 node.appendChild(Y.Node.create('<option/>').
-                    set('value', list[i]).setContent(Y.Escape.html(list[i])));
+                    set('value', list[i]).setContent(Y.Escape.html(i))); // RL EDIT: BJB130322
             }
         },
+        // RL EDIT: BJB130215
+        // Setter for the parent path attribute
+        set_parentpath: function(parentpath) {
+            this.parentpath = parentpath;
+        },
+        // End RL EDIT
         update_file: function(confirmed) {
             var selectnode = this.selectnode;
             var fileinfo = this.selectui.fileinfo;
@@ -683,6 +1097,12 @@ M.form_filemanager.init = function(Y, options) {
                         newfilename:newfilename, newfilepath:targetpath,
                         newlicense:newlicense, newauthor:newauthor};
                     action = 'updatefile';
+                    // RL EDIT: BJB130215
+                    var p = this.options.path;
+                    if (p.length) {
+                        params.parent = p[p.length - 1].path
+                    }
+                    // End RL EDIT
                 }
             }
             if (!action) {
@@ -778,7 +1198,19 @@ M.form_filemanager.init = function(Y, options) {
                         width : '1px',
                         height : '1px'
                     });
-                    node.set('src', this.selectui.fileinfo.url);
+                    // RL EDIT: BJB130215
+                    var starturl;
+                    var srcurl = this.selectui.fileinfo.url;
+                    if (this.selectui.fileinfo.original &&
+                        (starturl = this.selectui.fileinfo.original.indexOf('/repository/elis_files/openfile.php')) > 0) {
+                        srcurl = '..' + this.selectui.fileinfo.original.substr(starturl);
+                    }
+                    if (srcurl.indexOf('/repository/elis_files/openfile.php') > 0) {
+                        srcurl += '&filename=' + this.selectui.fileinfo.filename;
+                    }
+                    // alert('filemanager.js::setup_select_file(): src = ' + srcurl);
+                    node.set('src', srcurl);
+                    // End RL EDIT
                     Y.one('body').appendChild(node);
                 }
             }, this);
@@ -789,6 +1221,12 @@ M.form_filemanager.init = function(Y, options) {
                 var fileinfo = this.selectui.fileinfo;
                 dialog_options.scope = this;
                 params.filepath = fileinfo.filepath;
+                // RL EDIT: BJB130215
+                var p = this.options.path;
+                if (p.length) {
+                    params.parent = p[p.length - 1].path
+                }
+                // End RL EDIT
                 if (fileinfo.type == 'folder') {
                     params.filename = '.';
                     dialog_options.message = M.str.repository.confirmdeletefolder;
@@ -830,6 +1268,12 @@ M.form_filemanager.init = function(Y, options) {
                 }
                 params['filepath']   = fileinfo.filepath;
                 params['filename']   = '.';
+                // RL EDIT: BJB130215
+                var p = this.options.path;
+                if (p.length) {
+                    params.parent = p[p.length - 1].path
+                }
+                // End RL EDIT
                 selectnode.addClass('loading');
                 this.request({
                     action: 'zip',
@@ -837,20 +1281,38 @@ M.form_filemanager.init = function(Y, options) {
                     params: params,
                     callback: function(id, obj, args) {
                         args.scope.selectui.hide();
+                        // RL EDIT: BJB130215
+                        if (obj.error) {
+                            // Display the error message
+                            args.scope.print_msg(obj.error, 'error');
+                            return;
+                        }
+                        if (obj.filepath) {
+                            // Successful zip file creation, so refresh listing
                             args.scope.refresh(obj.filepath);
                         }
+                        // End RL EDIT
+                    }
                 });
             }, this);
             selectnode.one('.fp-file-unzip').on('click', function(e) {
                 e.preventDefault();
                 var params = {};
                 var fileinfo = this.selectui.fileinfo;
-                if (fileinfo.type != 'zip') {
+                // RL EDIT: BJB130215
+                if (fileinfo.type != 'zip' && fileinfo.fullname.lastIndexOf('.zip') != (fileinfo.fullname.length - 4)) {
+                // End RL EDIT
                     // this button should not even be shown
                     return;
                 }
                 params['filepath'] = fileinfo.filepath;
                 params['filename'] = fileinfo.fullname;
+                // RL EDIT: BJB130215
+                var p = this.options.path;
+                if (p.length) {
+                    params.parent = p[p.length - 1].path
+                }
+                // End RL EDIT
                 selectnode.addClass('loading');
                 this.request({
                     action: 'unzip',
@@ -912,6 +1374,13 @@ M.form_filemanager.init = function(Y, options) {
             } else {
                 selectnode.addClass('fp-file');
             }
+            // RL EDIT: BJB130215 - ELIS-6630: add unzip button
+            // var_dump('select_file(): node = ', node);
+            if (node.fullname.lastIndexOf('.zip') == (node.fullname.length - 4)) {
+                selectnode.removeClass('fp-file');
+                selectnode.addClass('fp-zip');
+            }
+            // End RL EDIT
             if (this.enablemainfile && (node.sortorder != 1) && node.type == 'file') {
                 selectnode.addClass('fp-cansetmain');
             }
@@ -922,12 +1391,40 @@ M.form_filemanager.init = function(Y, options) {
             selectnode.all('.fp-license select option[selected]').set('selected', false);
             selectnode.all('.fp-license select option[value='+node.license+']').set('selected', true);
             selectnode.all('.fp-path select option[selected]').set('selected', false);
+            // var_dump('select_file(): node = ', node);
             selectnode.all('.fp-path select option').each(function(el){
-                if (el.get('value') == foldername) {
+                if (el.get('value') == foldername || (node.parent && el.get('value') == node.parent)) { // RL EDIT: BJB130215
                     el.set('selected', true);
                 }
             });
-            selectnode.all('.fp-author input, .fp-license select').set('disabled',(node.type == 'folder')?'disabled':'');
+            // RL EDIT: BJB130215
+            // Determine if we are in the "ELIS" space
+            var in_elis_space = node.path && node.path.substr(0,1) != '/';
+            selectnode.all('.fp-author input, .fp-license select').set('disabled', (node.type == 'folder' || in_elis_space) ? 'disabled' : '');
+            if (in_elis_space && !node.canedit) {
+                // No editing permissions
+
+                // Hide the appropriate set of buttons
+                selectnode.all('.fp-file-delete, .fp-file-zip, .fp-file-unzip, .fp-file-update').each(function(el){
+                    el.hide();
+                });
+                // Disable the name input box
+                selectnode.all('.fp-saveas input').set('disabled', 'disabled');
+                // Disable the file path selection dropdown
+                selectnode.all('.fp-path select').set('disabled', 'disabled');
+            } else if (in_elis_space) {
+                // Have editing permissions
+
+                // Show the appropriate set of buttons
+                selectnode.all('.fp-file-delete, .fp-file-zip, .fp-file-unzip, .fp-file-update').each(function(el){
+                    el.show();
+                });
+                // Enable the name input box
+                selectnode.all('.fp-saveas input').set('disabled', '');
+                // Enable the file path selection dropdown
+                selectnode.all('.fp-path select').set('disabled', '');
+            }
+            // End RL EDIT
             // display static information about a file (when known)
             var attrs = ['datemodified','datecreated','size','dimensions','original','reflist'];
             for (var i in attrs) {
